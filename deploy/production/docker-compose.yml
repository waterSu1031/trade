version: '3.8'

# Production Docker Compose
# 위치: /opt/trade/docker-compose.yml

services:
  # =====================================================
  # 데이터베이스
  # =====================================================
  db:
    image: timescale/timescaledb:latest-pg15
    container_name: trade_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: trade_db,data_db
    ports:
      - "127.0.0.1:5432:5432"  # 로컬에서만 접근
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =====================================================
  # 캐시
  # =====================================================
  redis:
    image: redis:7-alpine
    container_name: trade_redis
    restart: unless-stopped
    command: redis-server --protected-mode no --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "127.0.0.1:6379:6379"  # 로컬에서만 접근
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =====================================================
  # 애플리케이션 서비스
  # =====================================================
  
  # Trade Batch (Spring Boot)
  trade_batch:
    image: ${REGISTRY_URL}/trade_batch:${IMAGE_TAG:-latest}
    container_name: trade_batch
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-production}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      IBKR_HOST: ${IBKR_HOST}
      IBKR_PORT: ${IBKR_PORT}
      IBKR_CLIENT_ID: ${IBKR_CLIENT_ID_BATCH}
      JAVA_OPTS: "-Xms512m -Xmx2g -Duser.timezone=${TZ}"
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - ./logs/batch:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Trade Dashboard (FastAPI)
  trade_dashboard:
    image: ${REGISTRY_URL}/trade_dashboard:${IMAGE_TAG:-latest}
    container_name: trade_dashboard
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      REDIS_URL: redis://${REDIS_HOST}:${REDIS_PORT}
      IBKR_HOST: ${IBKR_HOST}
      IBKR_PORT: ${IBKR_PORT}
      IBKR_CLIENT_ID: ${IBKR_CLIENT_ID_DASHBOARD}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"  # Public access for API
    volumes:
      - ./logs/dashboard:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Trade Engine (Python)
  trade_engine:
    image: ${REGISTRY_URL}/trade_engine:${IMAGE_TAG:-latest}
    container_name: trade_engine
    restart: unless-stopped
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      IBKR_HOST: ${IBKR_HOST}
      IBKR_PORT: ${IBKR_PORT}
      IBKR_CLIENT_ID: ${IBKR_CLIENT_ID_ENGINE}
      VECTORBT_TOKEN: ${VECTORBT_TOKEN}
      PYTHONUNBUFFERED: 1
    volumes:
      - ./logs/engine:/app/logs
      - ./data:/app/data
    depends_on:
      db:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Trade Frontend (SvelteKit)
  trade_frontend:
    image: ${REGISTRY_URL}/trade_frontend:${IMAGE_TAG:-latest}
    container_name: trade_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_API_URL: ${VITE_API_URL}
      VITE_WS_URL: ${VITE_WS_URL}
    ports:
      - "3000:3000"  # Public access
    depends_on:
      trade_dashboard:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================================
  # Reverse Proxy (선택사항)
  # =====================================================
  nginx:
    image: nginx:alpine
    container_name: trade_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - trade_frontend
      - trade_dashboard
    profiles:
      - with-proxy

# =====================================================
# Volumes
# =====================================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local

# =====================================================
# Networks
# =====================================================
networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16