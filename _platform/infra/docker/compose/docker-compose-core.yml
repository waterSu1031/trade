version: '3.8'

# Core services only - No monitoring stack
# For personal automated trading system

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: trade_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: trade_db
      POSTGRES_USER: ${DB_USER:-freeksj}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-Lsld1501!}
    ports:
      - "5432:5432"
    volumes:
      - ../../volumes/postgresql:/var/lib/postgresql/data
      - ../../configs/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - trade_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-freeksj} -d trade_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trade_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ../../volumes/redis:/data
      - ../../configs/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - trade_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ../../../trade_dashboard
      dockerfile: Dockerfile
    container_name: trade_backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${DB_USER:-freeksj}:${DB_PASSWORD:-Lsld1501!}@db:5432/trade_db
      REDIS_URL: redis://redis:6379
      IB_HOST: ${IB_HOST:-host.docker.internal}
      IB_PORT: ${IB_PORT:-4001}
      IB_CLIENT_ID: ${IB_CLIENT_ID:-1}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trade_network
    volumes:
      - ../../../trade_dashboard/trading.db:/app/trading.db
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Frontend
  frontend:
    build:
      context: ../../../trade_frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
        VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:8000}
    container_name: trade_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
      VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:8000}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - trade_network

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ../proxy/nginx
      dockerfile: Dockerfile
    container_name: trade_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../proxy/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - trade_network

  # Docker Management UI
  portainer:
    image: portainer/portainer-ce:latest
    container_name: trade_portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "8001:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - trade_network

networks:
  trade_network:
    driver: bridge

volumes:
  portainer_data:
    driver: local